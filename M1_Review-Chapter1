# CSC360
Operating Systems

Midterm #1 review.

Introduction - Chapter 1

123

What is OS?
  \-> "special" program run directly on computer hardware.
  \-> Supports multiple other programs
    \-> Eg. Shell, compiler, assembler, etc.

OS: between hardware and other software
  \-> present a virtual machine to other software
    \-> hides hardware details, extends hardware features.
    \-> known as hardware++
  \-> provides controlled access to hardware
    \-> restrict hardware access, manage hardware resources
    \-> hardware--

How do we use OS?
  \-> through OS interfaces

Why do we need OS?
  \-> Control and Coordinate
    \-> allows a\many program to use computer properly, eg. program execution, error detections, resource allocation...
  \-> Share and Separate
    \-> share between devices, programs, computers, users
    \-> protect one from all others.
  \-> Protects the operating system from errant users and errant users from one another.
        \-> designates machine instructions that can cause harm as privileged instruction
        \-> the hardware only allows these privileged instructions to be executed in kernel mode only.

Memory Heirarchy:

registers (inside cpu)
  \-> cache (transparent to programs)
    \-> main memory (main storage)
      \->electronic disk (secondary storage)
        \->magnetic disk
          \-> optical disk
            \-> magenetic tapes (backups)

Interrupts:

  \-> Asynchronous operation

  \-> Types:
    \-> Nonmaskable interrupts
      \-> eg. hardware fault
    \-> Hardware interrupts
      \-> hardware events: eg. I/O completion
      \-> interrupt controller: priority and arbitration
    \-> Software interrupts
      \-> trap, system calls.

Handling Interrupts:
  \-> Save current State
  \-> update program counter
  \-> execute interrupt routine
  \-> restore previous state

Computer Architectures:

  \-> Single-Processor Systems
  \-> Multi-Processor Systems
  \-> Cluster Systems
  \-> Distributed Systems
  \-> Grid Systems

History:
  \-> (1) Uniprogramming
    \-> "One program at a time"
  \-> (2) Multiprogramming
    \-> "Many programs at a time"

Processing:

  Batched:
    \-> load a pool of jobs
    \-> Execute one job UNTIL it is blocked
    \-> Then pick another one to execute
  Time Sharing:
    \-> Execute one job up to a certain time (time intervals are usually really small. therfore user can interact
                                              with any program running)
    \-> Then Switch to another job
    \-> Seems to execute MANY jobs at the same time

  Batch vs time sharing
    \-> better job responsiveness
    \-> switching overhead

Operating System Modes:

  User Mode:
    \-> mode bit = 1
    \-> executes tasks from user. Eg. user processes
    \-> user has control of computer
    \-> can not directly access computer hardware or reference memory
  Kernel Mode:
    \-> mode bit = 0
    \-> executes system calls
    \-> operating system has control of computer
    \-> has complete and unrestricted access to computer hardware

Process Management:

  A process needs resources:
    \-> CPU Time
    \-> memory files
    \-> I/O Devices

  Single Thread Process:
    \-> has one program counter that specifes next instruction to execute

  MultiThreading process:
    \-> has multiple program counters each pointing to the next instruction to execute

  OS is responsible for:
    \-> Scheduling processes and threads on the CPU's
    \-> Creating and deleting both user and system processes
    \-> Suspending and resuming processes
    \-> Providing mechanisms for process synchronization
    \-> Providing mechanisms for process communication

Memory Management:

  Main memory
    \-> store instructions for execution
    \-> store data for processing

  OS keeps track of available memory
    \-> Allocates and reclaims memory
      \-> Provide protected access
      \-> trap invalid access

  OS will swap in/out (virtual) memory

Storage and I/O Management:

  \-> Everything is a file in UNIX

  OS is responsible for:
    \-> Creating and deleting files
    \-> Supporting primitives for manipulating files and directories
    \-> Creating and deleting directories to organize files
    \-> Mapping files onto secondary storage
    \-> Backing up files on stable (nonvolatile) storage media

Specialized OS:

  Real-Time Systems:

    HARD real-time OS
      \-> is purely deterministic and time constraint system
      \-> execution deadlines have to be met eg. 10 second deadline the process must be completed at
          the 10th second not the 11th or the 9th
    SOFT real-time OS
      \-> meeting execution deadlines is not compulsory  for every task. But the process should be processd and
          give a result.
      \-> But deadlines should not be missed.

  Handheld Systems:
    \-> almost a full-blown OS, with resource constraints

  Embedded Systems:
    \-> Very severe reswource constraints
